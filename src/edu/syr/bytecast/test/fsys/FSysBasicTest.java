/*
 * This file is part of Bytecast.
 *
 * Bytecast is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Bytecast is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Bytecast.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
package edu.syr.bytecast.test.fsys;

import edu.syr.bytecast.fsys.elf.*;
import edu.syr.bytecast.interfaces.fsys.*;
import edu.syr.bytecast.test.ITestCase;
import edu.syr.bytecast.test.mockups.MockBytecastFsys;
import edu.syr.bytecast.util.Paths;
import junit.framework.TestCase;

public class FSysBasicTest extends TestCase{// implements ITestCase{

    
    private String m_message;
    
    //--------------------------------------------------------------------------
    // This test compares the FsysMock1 ExeObj against the ExeObj generated by
    // ElfExeObjParser.
    //--------------------------------------------------------------------------
    
    //@Override
    public void testSay() {

        IBytecastFsys mock_fsys = new MockBytecastFsys(); //get from somewhere (product/mock)
        IBytecastFsys product_fsys = new ElfExeObjParser();

        try
        {
            ExeObj mock_exe_obj = mock_fsys.parse();
            
            product_fsys.setFilepath(Paths.v().getPath("BYTECAST_TEST_FSYS_SIMPLE_TEST_ELF_FILE"));
            ExeObj product_exe_obj = product_fsys.parse();
            
            if(mock_exe_obj.equals(product_exe_obj))
            {
                m_message = "Test Case Passed";
                assertTrue("passed", true);
              //  return true;              
            }
            else
            {
                m_message = "Mock Fsys does not match Product Fsys.";
                m_message += "\n\nMock Fsys ExeObj:";
                m_message += "\n Entry Point: " + mock_exe_obj.getEntryPointIndex();
                m_message += "\n Num Segments: " + mock_exe_obj.getSegments().size();
                m_message += "\n Num Functions: " + mock_exe_obj.getFunctions().size();
                m_message += "\n Hash: " + mock_exe_obj.hashCode();
                m_message += "\n\nProduct Fsys ExeObj:";
                m_message += "\n Entry Point: " + product_exe_obj.getEntryPointIndex();
                m_message += "\n Num Segments: " + product_exe_obj.getSegments().size();
                m_message += "\n Num Functions: " + product_exe_obj.getFunctions().size();
                m_message += "\n Hash: " + product_exe_obj.hashCode();                                            
                assertTrue("Does Not Match Mock Obj", false);
              //  return false;
            }
        }
        catch(Exception e)
        {    
            assertTrue("Cantopenfile", false);
          //  return false;
        }      
        
    }

   //@Override
    public String getMessage() {
        return m_message;
    }
    
   /* public void main(String args[])
    {
        FSysBasicTest test = new FSysBasicTest();
        Paths.v().setRoot("../../../code/bytecast");                  
        try {
            Paths.v().parsePathsFile();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        test.test();
        System.out.println(test.getMessage());
        
    }*/
}
